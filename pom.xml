<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.zixin</groupId>
	<artifactId>spring-boot-dock</artifactId>
	<version>1.0.0</version>
	<packaging>jar</packaging>
	<name></name>
	<description>Spring Boot with Thymeleaf</description>



	<!-- Inherit defaults from Spring Boot -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.3.2.RELEASE</version>
		<!-- <relativePath/> --><!-- lookup parent from repository -->
	</parent>

	<properties>
		<jdk.version>1.8</jdk.version>
		<docker.image.prefix>10.174.8.139:5001/renyan/alpine</docker.image.prefix>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<!-- Add typical dependencies for a web application -->
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
	</dependencies>

	<profiles>

		<profile>
			<id>test</id>
			<properties>
				<ry.environment>test</ry.environment>
				<docker.image.suffix>test/${project.artifactId}</docker.image.suffix>
			</properties>
			<activation>
			</activation>
		</profile>
	</profiles>




	<!-- Package as an executable JAR -->
	<build>
		<finalName>${project.artifactId}-${project.version}-${git.commit.id.abbrev}</finalName>
		<resources>
			<resource>
				<filtering>true</filtering>
				<directory>src/main/resources</directory>
			</resource>
		</resources>


		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<fork>true</fork>
				</configuration>
			</plugin>

			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!--日期格式;默认值:dd.MM.yyyy '@' HH:mm:ss z; -->
					<dateFormat>yyyyMMddHHmmss</dateFormat>
					<!--,构建过程中,是否打印详细信息;默认值:false; -->
					<verbose>false</verbose>
					<!-- ".git"文件路径;默认值:${project.basedir}/.git; -->
					<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
					<!--若项目打包类型为pom,是否取消构建;默认值:true; -->
					<skipPoms>false</skipPoms>
					<!--是否生成"git.properties"文件;默认值:false; -->
					<generateGitPropertiesFile>false</generateGitPropertiesFile>
					<!--指定"git.properties"文件的存放路径(相对于${project.basedir}的一个路径); -->
					<generateGitPropertiesFilename>git.properties</generateGitPropertiesFilename>
					<!--".git"文件夹未找到时,构建是否失败;若设置true,则构建失败;若设置false,则跳过执行该目标;默认值:true; -->
					<failOnNoGitDirectory>true</failOnNoGitDirectory>

					<!--git描述配置,可选;由JGit提供实现; -->
					<gitDescribe>
						<!--是否生成描述属性 -->
						<skip>false</skip>
						<!--提交操作未发现tag时,仅打印提交操作ID, -->
						<always>false</always>
						<!--提交操作ID显式字符长度,最大值为:40;默认值:7; 0代表特殊意义;后面有解释; -->
						<abbrev>7</abbrev>
						<!--构建触发时,代码有修改时(即"dirty state"),添加指定后缀;默认值:""; -->
						<dirty>-dirty</dirty>
						<!--always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" 
							format, even if "on" a tag. The distance will always be 0 if you're "on" 
							the tag. -->
						<forceLongFormat>false</forceLongFormat>
					</gitDescribe>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.2.3</version>
				<configuration>
					<imageName>${docker.image.prefix}/${project.artifactId}/${docker.image.suffix}:${project.version}-${git.commit.id.abbrev}</imageName>
					<dockerDirectory>${project.build.directory}/classes/build</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
							<include>*/Dockerfile</include>
						</resource>
					</resources>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>



</project>